{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ContextDB Documentation","text":"<p>ContextDB is a Python-based database system designed to store and retrieve context data. It provides an abstract interface for different database backends and includes concrete implementations for in-memory and Redis databases. ContextDB also provides a FastAPI-based REST API for interacting with the database.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with ContextDB, you'll first need to install the required dependencies. You can do this by running the following command:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Next, you'll need to set up your database backend. If you're using the in-memory database, no additional setup is required. If you're using the Redis database, you'll need to have a running Redis server and provide the host, port, and password to the <code>RedisDatabase</code> constructor.</p> <p>Once your database is set up, you can start the ContextDB server by running the following command:</p> <pre><code>python main.py\n</code></pre> <p>This will start the server and make the API available at <code>http://localhost:8000</code>.</p>"},{"location":"#using-the-api","title":"Using the API","text":"<p>The ContextDB API provides endpoints for adding, retrieving, updating, and deleting context data. It also provides endpoints for searching for context data and performing advanced queries.</p> <p>For detailed information on how to use these endpoints, see the API documentation.</p>"},{"location":"#using-the-client","title":"Using the Client","text":"<p>The ContextDB client provides a Python interface for interacting with the ContextDB API. It includes methods for adding, retrieving, updating, and deleting context data, as well as for searching for context data.</p> <p>For detailed information on how to use the client, see the client documentation.</p>"},{"location":"api/","title":"ContextDB API Documentation","text":"<p>This document provides a detailed description of the ContextDB API.</p>"},{"location":"api/#base-url","title":"Base URL","text":"<p>All API requests are made to:</p> <pre><code>http://&lt;db_host&gt;:&lt;db_port&gt;/&lt;db_name&gt;\n</code></pre>"},{"location":"api/#authentication","title":"Authentication","text":"<p>The API uses Basic Authentication. Include your username and password in the <code>auth</code> parameter of your requests.</p>"},{"location":"api/#headers","title":"Headers","text":"<p>All requests must include the <code>Content-Type: application/json</code> header.</p>"},{"location":"api/#endpoints","title":"Endpoints","text":""},{"location":"api/#post-ctxdbcontexts","title":"POST /ctxdb/contexts","text":"<p>Add a new context.</p>"},{"location":"api/#request-body","title":"Request Body","text":"<pre><code>{\n\"text\": \"string\",\n\"url\": \"string\",\n\"metadata\": {\n\"additionalProp1\": \"string\",\n\"additionalProp2\": \"string\",\n\"additionalProp3\": \"string\"\n}\n}\n</code></pre>"},{"location":"api/#response","title":"Response","text":"<pre><code>{\n\"message\": \"Context added successfully\"\n}\n</code></pre>"},{"location":"api/#get-ctxdbcontextsidx","title":"GET /ctxdb/contexts/{idx}","text":"<p>Get a context by its index.</p>"},{"location":"api/#path-parameters","title":"Path Parameters","text":"<ul> <li><code>idx</code> (string): Index of the context to retrieve.</li> </ul>"},{"location":"api/#response_1","title":"Response","text":"<pre><code>{\n\"id\": \"string\",\n\"text\": \"string\",\n\"url\": \"string\",\n\"metadata\": {\n\"additionalProp1\": \"string\",\n\"additionalProp2\": \"string\",\n\"additionalProp3\": \"string\"\n},\n\"embedding\": \"string\",\n\"confidence\": 0\n}\n</code></pre>"},{"location":"api/#delete-ctxdbcontextsidx","title":"DELETE /ctxdb/contexts/{idx}","text":"<p>Delete a context by its index.</p>"},{"location":"api/#path-parameters_1","title":"Path Parameters","text":"<ul> <li><code>idx</code> (string): Index of the context to delete.</li> </ul>"},{"location":"api/#response_2","title":"Response","text":"<pre><code>{\n\"message\": \"Context deleted successfully\"\n}\n</code></pre>"},{"location":"api/#put-ctxdbcontextsidx","title":"PUT /ctxdb/contexts/{idx}","text":"<p>Update an existing context by its index.</p>"},{"location":"api/#path-parameters_2","title":"Path Parameters","text":"<ul> <li><code>idx</code> (string): Index of the context to update.</li> </ul>"},{"location":"api/#request-body_1","title":"Request Body","text":"<pre><code>{\n\"text\": \"string\",\n\"url\": \"string\",\n\"metadata\": {\n\"additionalProp1\": \"string\",\n\"additionalProp2\": \"string\",\n\"additionalProp3\": \"string\"\n}\n}\n</code></pre>"},{"location":"api/#response_3","title":"Response","text":"<pre><code>{\n\"message\": \"Context updated successfully\"\n}\n</code></pre>"},{"location":"api/#post-ctxdbcontextsquery","title":"POST /ctxdb/contexts/query","text":"<p>Query for a context.</p>"},{"location":"api/#request-body_2","title":"Request Body","text":"<pre><code>{\n\"text\": \"string\",\n\"url\": \"string\",\n\"metadata\": {\n\"additionalProp1\": \"string\",\n\"additionalProp2\": \"string\",\n\"additionalProp3\": \"string\"\n}\n}\n</code></pre>"},{"location":"api/#response_4","title":"Response","text":"<pre><code>[\n{\n\"id\": \"string\",\n\"text\": \"string\",\n\"url\": \"string\",\n\"metadata\": {\n\"additionalProp1\": \"string\",\n\"additionalProp2\": \"string\",\n\"additionalProp3\": \"string\"\n},\n\"embedding\": \"string\",\n\"confidence\": 0\n}\n]\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>If an error occurs during a request, the API will return an HTTP status code and a JSON response with the following format:</p> <pre><code>{\n\"detail\": \"string\"\n}\n</code></pre> <p>The <code>detail</code> field will contain a message describing the error.</p>"},{"location":"client/","title":"ContextDBClient","text":"<p>The <code>ContextDBClient</code> class provides a Python interface for interacting with the ContextDB database. It handles the communication with the database by making HTTP requests to the ContextDB API.</p>"},{"location":"client/#initialization","title":"Initialization","text":"<p>The <code>ContextDBClient</code> is initialized with the following parameters:</p> <ul> <li><code>db_name</code>: The name of the database.</li> <li><code>db_host</code>: The host address of the database.</li> <li><code>db_port</code>: The port number of the database.</li> <li><code>db_user</code>: The username for the database.</li> <li><code>db_password</code>: The password for the database.</li> </ul> <pre><code>from ctxdb.client.client import ContextDBClient\nclient = ContextDBClient(db_name=\"mydb\", db_host=\"localhost\", db_port=8000, db_user=\"user\", db_password=\"password\")\n</code></pre>"},{"location":"client/#methods","title":"Methods","text":"<p>The <code>ContextDBClient</code> provides the following methods for interacting with the database:</p>"},{"location":"client/#add_context","title":"add_context","text":"<p>The <code>add_context</code> method adds a new context to the database.</p> <pre><code>from ctxdb.common.models import InputContext\ninput_ctx = InputContext(id=\"1\", text=\"Hello, world!\")\nclient.add_context(input_ctx)\n</code></pre>"},{"location":"client/#get_context","title":"get_context","text":"<p>The <code>get_context</code> method retrieves a context by its ID.</p> <pre><code>context = client.get_context(\"1\")\n</code></pre>"},{"location":"client/#update_context","title":"update_context","text":"<p>The <code>update_context</code> method updates an existing context.</p> <pre><code>input_ctx = InputContext(id=\"1\", text=\"Hello, world! Updated.\")\nclient.update_context(input_ctx)\n</code></pre>"},{"location":"client/#delete_context","title":"delete_context","text":"<p>The <code>delete_context</code> method deletes a context by its ID.</p> <pre><code>client.delete_context(\"1\")\n</code></pre>"},{"location":"client/#search_context","title":"search_context","text":"<p>The <code>search_context</code> method searches for contexts that match the given <code>InputContext</code>.</p> <pre><code>input_ctx = InputContext(id=\"1\", text=\"Hello, world!\")\nresults = client.search_context(input_ctx)\n</code></pre>"},{"location":"client/#error-handling","title":"Error Handling","text":"<p>The <code>ContextDBClient</code> raises a <code>ContextDBException</code> when an error occurs during a request. This exception can be caught and handled as needed.</p> <pre><code>from ctxdb.client.client import ContextDBException\ntry:\nclient.add_context(input_ctx)\nexcept ContextDBException as e:\nprint(f\"An error occurred: {e}\")\n</code></pre>"},{"location":"client_api/","title":"ContextDB Client Developer API","text":"<p>This document provides a detailed overview of the <code>ContextDBClient</code> class, which is used to interact with the ContextDB database.</p>"},{"location":"client_api/#class-definition","title":"Class Definition","text":"<pre><code>class ContextDBClient:\ndef __init__(self, db_name: str, db_host: str, db_port: int, db_user: str, db_password: str) -&gt; None\ndef add_context(self, input_ctx: InputContext) -&gt; Optional[str]\ndef get_context(self, context_id: str) -&gt; Optional[Context]\ndef update_context(self, input_ctx: InputContext) -&gt; bool\ndef delete_context(self, context_id: str) -&gt; bool\ndef search_context(self, input_ctx: InputContext) -&gt; OutputContext\n</code></pre>"},{"location":"client_api/#class-methods","title":"Class Methods","text":""},{"location":"client_api/#__init__self-db_name-str-db_host-str-db_port-int-db_user-str-db_password-str-none","title":"<code>__init__(self, db_name: str, db_host: str, db_port: int, db_user: str, db_password: str) -&gt; None</code>","text":"<p>The constructor for the <code>ContextDBClient</code> class. Initializes a new instance of the client.</p>"},{"location":"client_api/#parameters","title":"Parameters","text":"<ul> <li><code>db_name</code>: The name of the database.</li> <li><code>db_host</code>: The host address of the database.</li> <li><code>db_port</code>: The port number of the database.</li> <li><code>db_user</code>: The username for the database.</li> <li><code>db_password</code>: The password for the database.</li> </ul>"},{"location":"client_api/#add_contextself-input_ctx-inputcontext-optionalstr","title":"<code>add_context(self, input_ctx: InputContext) -&gt; Optional[str]</code>","text":"<p>Adds a new context to the database.</p>"},{"location":"client_api/#parameters_1","title":"Parameters","text":"<ul> <li><code>input_ctx</code>: The context to add.</li> </ul>"},{"location":"client_api/#returns","title":"Returns","text":"<ul> <li>The ID of the added context, or <code>None</code> if the operation fails.</li> </ul>"},{"location":"client_api/#get_contextself-context_id-str-optionalcontext","title":"<code>get_context(self, context_id: str) -&gt; Optional[Context]</code>","text":"<p>Retrieves a context by its ID.</p>"},{"location":"client_api/#parameters_2","title":"Parameters","text":"<ul> <li><code>context_id</code>: The ID of the context to retrieve.</li> </ul>"},{"location":"client_api/#returns_1","title":"Returns","text":"<ul> <li>The retrieved context, or <code>None</code> if the operation fails.</li> </ul>"},{"location":"client_api/#update_contextself-input_ctx-inputcontext-bool","title":"<code>update_context(self, input_ctx: InputContext) -&gt; bool</code>","text":"<p>Updates an existing context.</p>"},{"location":"client_api/#parameters_3","title":"Parameters","text":"<ul> <li><code>input_ctx</code>: The updated context data.</li> </ul>"},{"location":"client_api/#returns_2","title":"Returns","text":"<ul> <li><code>True</code> if the update is successful, <code>False</code> otherwise.</li> </ul>"},{"location":"client_api/#delete_contextself-context_id-str-bool","title":"<code>delete_context(self, context_id: str) -&gt; bool</code>","text":"<p>Deletes a context by its ID.</p>"},{"location":"client_api/#parameters_4","title":"Parameters","text":"<ul> <li><code>context_id</code>: The ID of the context to delete.</li> </ul>"},{"location":"client_api/#returns_3","title":"Returns","text":"<ul> <li><code>True</code> if the deletion is successful, <code>False</code> otherwise.</li> </ul>"},{"location":"client_api/#search_contextself-input_ctx-inputcontext-outputcontext","title":"<code>search_context(self, input_ctx: InputContext) -&gt; OutputContext</code>","text":"<p>Searches for contexts that match the given <code>InputContext</code>.</p>"},{"location":"client_api/#parameters_5","title":"Parameters","text":"<ul> <li><code>input_ctx</code>: The search criteria.</li> </ul>"},{"location":"client_api/#returns_4","title":"Returns","text":"<ul> <li>The matching context.</li> </ul>"},{"location":"client_api/#example-usage","title":"Example Usage","text":"<pre><code>from ctxdb.client import ContextDBClient\nfrom ctxdb.common.models import InputContext\n# Initialize the client\nclient = ContextDBClient(\"mydb\", \"localhost\", 8000, \"user\", \"password\")\n# Add a context\ninput_ctx = InputContext(id=\"1\", text=\"This is a test context.\")\nclient.add_context(input_ctx)\n# Get a context\ncontext = client.get_context(\"1\")\n# Update a context\ninput_ctx.text = \"This is an updated test context.\"\nclient.update_context(input_ctx)\n# Delete a context\nclient.delete_context(\"1\")\n# Search for a context\nresults = client.search_context(input_ctx)\n</code></pre>"},{"location":"getting_started/","title":"Getting Started with ContextDB","text":"<p>This guide will walk you through the steps to get started with ContextDB, a Python-based database for storing and retrieving context data.</p>"},{"location":"getting_started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have met the following requirements:</p> <ul> <li>You have installed Python 3.7 or later.</li> <li>You have a basic understanding of Python programming.</li> </ul>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>To install ContextDB, follow these steps:</p> <ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/philipsolarz/ctxdb.git\n</code></pre> <ol> <li>Navigate to the project directory:</li> </ol> <pre><code>cd ctxdb\n</code></pre> <ol> <li>Install the required packages:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"getting_started/#usage","title":"Usage","text":"<p>Here is a simple example of how to use ContextDB:</p> <pre><code>from ctxdb.client import ContextDBClient\nfrom ctxdb.common.models import InputContext\n# Initialize the client\nclient = ContextDBClient(db_name=\"mydb\", db_host=\"localhost\", db_port=8000, db_user=\"user\", db_password=\"password\")\n# Create a new context\ninput_ctx = InputContext(id=\"1\", text=\"Hello, world!\")\nclient.add_context(input_ctx)\n# Retrieve the context\ncontext = client.get_context(\"1\")\nprint(context.text)  # Outputs: Hello, world!\n# Update the context\ninput_ctx.text = \"Hello, ContextDB!\"\nclient.update_context(input_ctx)\n# Delete the context\nclient.delete_context(\"1\")\n</code></pre>"},{"location":"getting_started/#documentation","title":"Documentation","text":"<p>For more detailed information about the API and its usage, please refer to the API Documentation.</p>"},{"location":"getting_started/#contributing","title":"Contributing","text":"<p>If you want to contribute to the development of ContextDB, refer to the Contribution Guidelines.</p>"},{"location":"getting_started/#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license. See the LICENSE file for details.</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide will walk you through the steps to install and set up the ContextDB Python package.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before you can install ContextDB, you need to have Python 3.6 or later installed on your machine. You can download Python from the official website: https://www.python.org/downloads/</p>"},{"location":"installation/#installation","title":"Installation","text":"<p>You can install ContextDB using pip, which is a package manager for Python.</p> <ol> <li> <p>Open a terminal.</p> </li> <li> <p>Install the package with the following command:</p> </li> </ol> <pre><code>pip install ctxdb\n</code></pre>"},{"location":"installation/#setup","title":"Setup","text":"<p>After installing the package, you need to set up the database connection. This involves specifying the database host, port, username, and password.</p> <p>You can do this by setting the following environment variables:</p> <ul> <li><code>DB_HOST</code>: The host of the database.</li> <li><code>DB_PORT</code>: The port of the database.</li> <li><code>DB_USER</code>: The username to connect to the database.</li> <li><code>DB_PASSWORD</code>: The password to connect to the database.</li> </ul> <p>For example, you can set these variables in a bash shell like this:</p> <pre><code>export DB_HOST=localhost\nexport DB_PORT=5432\nexport DB_USER=myuser\nexport DB_PASSWORD=mypassword\n</code></pre>"},{"location":"installation/#testing-the-installation","title":"Testing the Installation","text":"<p>To verify that ContextDB has been installed correctly, you can run the following command:</p> <pre><code>python -c \"import ctxdb\"\n</code></pre> <p>If the command does not produce any output, this means that ContextDB has been installed successfully.</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installing ContextDB, you can start using it to manage and query your context data. For more information on how to use ContextDB, refer to the Usage Guide.</p>"},{"location":"server/","title":"Server","text":"<p>The server module of the ContextDB project is responsible for handling all the server-side operations. It includes the core database operations, the API endpoints, and the ASGI server setup.</p>"},{"location":"server/#core","title":"Core","text":"<p>The core module includes the main database operations. It includes the following classes:</p> <ul> <li><code>DBInterface</code>: An abstract base class that defines the interface for the database backends.</li> <li><code>InMemoryDatabase</code>: A concrete class that implements the <code>DBInterface</code> for an in-memory database.</li> <li><code>RedisDatabase</code>: A concrete class that implements the <code>DBInterface</code> for a Redis database.</li> <li><code>ContextDB</code>: The main class for the ContextDB database. It uses dependency injection to work with any database backend that implements the <code>DBInterface</code>.</li> </ul>"},{"location":"server/#api","title":"API","text":"<p>The API module includes the FastAPI application setup and the API routes. It includes the following functions:</p> <ul> <li><code>create_api</code>: Creates a FastAPI application and sets up the routes.</li> <li><code>create_ctxdb</code>: Creates a <code>ContextDB</code> instance with an in-memory database backend.</li> </ul>"},{"location":"server/#asgi","title":"ASGI","text":"<p>The ASGI module includes the setup for the ASGI server using Uvicorn. It runs the FastAPI application on the host \"0.0.0.0\" and port 8000.</p>"},{"location":"server/#routes","title":"Routes","text":"<p>The routes module includes the API endpoints for the FastAPI application. It includes endpoints for adding, retrieving, updating, deleting, and querying contexts.</p>"},{"location":"server/#models","title":"Models","text":"<p>The models module includes the Pydantic models for the input and output data of the API endpoints. It includes the following classes:</p> <ul> <li><code>InputContext</code>: The model for the input data of the API endpoints.</li> <li><code>Context</code>: The model for the context data in the database.</li> <li><code>OutputContext</code>: The model for the output data of the API endpoints.</li> <li><code>ContextList</code>: The model for a list of contexts.</li> </ul>"},{"location":"server/#client","title":"Client","text":"<p>The client module includes a client class for handling communication with the ContextDB database. It includes methods for adding, retrieving, updating, deleting, and searching contexts.</p>"},{"location":"server_api/","title":"Server Developer API","text":"<p>This document provides a detailed description of the server-side API for the ContextDB project.</p>"},{"location":"server_api/#modules","title":"Modules","text":""},{"location":"server_api/#ctxdbservercorectxdb","title":"ctxdb.server.core.ctxdb","text":"<p>This module contains the main classes for the ContextDB server-side application.</p>"},{"location":"server_api/#classes","title":"Classes","text":"<ul> <li><code>DBInterface</code>: An abstract base class that defines the interface for database backends.</li> <li><code>InMemoryDatabase</code>: A concrete class that implements the <code>DBInterface</code> for an in-memory database.</li> <li><code>RedisDatabase</code>: A concrete class that implements the <code>DBInterface</code> for a Redis database.</li> <li><code>ContextDB</code>: The main class for the ContextDB application.</li> </ul>"},{"location":"server_api/#ctxdbserverapiapi","title":"ctxdb.server.api.api","text":"<p>This module contains the FastAPI application for the ContextDB server-side application.</p>"},{"location":"server_api/#functions","title":"Functions","text":"<ul> <li><code>create_api(ctxdb: ContextDB) -&gt; FastAPI</code>: Creates a FastAPI application with the provided ContextDB instance.</li> <li><code>create_ctxdb() -&gt; ContextDB</code>: Creates a ContextDB instance with an in-memory database.</li> </ul>"},{"location":"server_api/#ctxdbserverapiroutes","title":"ctxdb.server.api.routes","text":"<p>This module contains the routes for the FastAPI application.</p>"},{"location":"server_api/#functions_1","title":"Functions","text":"<ul> <li><code>encode_context(input_ctx: InputContext) -&gt; Context</code>: Encodes the text of an <code>InputContext</code> instance and returns a <code>Context</code> instance.</li> <li><code>setup_routes(api: FastAPI, ctxdb: ContextDB) -&gt; None</code>: Sets up the routes for the FastAPI application.</li> </ul>"},{"location":"server_api/#usage","title":"Usage","text":"<p>To start the server, run the following command:</p> <pre><code>gunicorn asgi:api </code></pre> <p>This will start the server at <code>http://localhost:8000</code>.</p>"},{"location":"server_api/#endpoints","title":"Endpoints","text":"<p>The server provides the following endpoints:</p> <ul> <li><code>POST /ctxdb/contexts</code>: Adds a new context.</li> <li><code>GET /ctxdb/contexts/{idx}</code>: Retrieves a context by its index.</li> <li><code>DELETE /ctxdb/contexts/{idx}</code>: Deletes a context by its index.</li> <li><code>PUT /ctxdb/contexts/{idx}</code>: Updates a context by its index.</li> <li><code>POST /ctxdb/contexts/query</code>: Queries for a context.</li> </ul> <p>For more details on the request and response formats for these endpoints, see the API documentation when the server is running.</p>"},{"location":"usage/","title":"Usage","text":"<p>This document provides a brief guide on how to use the ContextDB Python client.</p>"},{"location":"usage/#installation","title":"Installation","text":"<p>Before you can use the ContextDB client, you need to install it. You can do this using pip:</p> <pre><code>pip install ctxdb-client\n</code></pre>"},{"location":"usage/#initialization","title":"Initialization","text":"<p>To start using the ContextDB client, you need to import it and create an instance:</p> <pre><code>from ctxdb.client import ContextDBClient\nclient = ContextDBClient(db_name=\"mydb\", db_host=\"localhost\", db_port=8000, db_user=\"user\", db_password=\"password\")\n</code></pre>"},{"location":"usage/#adding-a-context","title":"Adding a Context","text":"<p>To add a new context to the database, you can use the <code>add_context</code> method:</p> <pre><code>from ctxdb.common.models import InputContext\ninput_ctx = InputContext(id=\"1\", text=\"This is a test context.\")\nclient.add_context(input_ctx)\n</code></pre>"},{"location":"usage/#retrieving-a-context","title":"Retrieving a Context","text":"<p>To retrieve a context by its ID, you can use the <code>get_context</code> method:</p> <pre><code>context = client.get_context(\"1\")\nprint(context.text)\n</code></pre>"},{"location":"usage/#updating-a-context","title":"Updating a Context","text":"<p>To update an existing context, you can use the <code>update_context</code> method:</p> <pre><code>input_ctx = InputContext(id=\"1\", text=\"This is an updated test context.\")\nclient.update_context(input_ctx)\n</code></pre>"},{"location":"usage/#deleting-a-context","title":"Deleting a Context","text":"<p>To delete a context by its ID, you can use the <code>delete_context</code> method:</p> <pre><code>client.delete_context(\"1\")\n</code></pre>"},{"location":"usage/#searching-for-a-context","title":"Searching for a Context","text":"<p>To search for contexts that match a given InputContext, you can use the <code>search_context</code> method:</p> <pre><code>input_ctx = InputContext(id=\"1\", text=\"This is a test context.\")\nresults = client.search_context(input_ctx)\nfor result in results:\nprint(result.text)\n</code></pre>"},{"location":"usage/#error-handling","title":"Error Handling","text":"<p>All methods of the ContextDB client raise a <code>ContextDBException</code> when an error occurs. You can catch this exception to handle errors:</p> <pre><code>try:\nclient.add_context(input_ctx)\nexcept ContextDBException as e:\nprint(f\"An error occurred: {e}\")\n</code></pre>"}]}